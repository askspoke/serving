# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: tensorflow_serving/apis/admin_service.proto
# To regenerate run
# python -m pip install grpcio-tools
# python -m grpc_tools.protoc --python_out=. --grpc_python_out=. -I.:./tensorflow tensorflow_serving/apis/admin_service.proto
#
import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from tensorflow_serving.apis import predict_pb2 as tensorflow__serving_dot_apis_dot_predict__pb2
from tensorflow_serving.config import model_server_config_pb2 as tensorflow__serving_dot_config_dot_model__server__config__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='tensorflow_serving/apis/admin_service.proto',
  package='tensorflow.serving',
  syntax='proto3',
  serialized_pb=_b('\n+tensorflow_serving/apis/admin_service.proto\x12\x12tensorflow.serving\x1a%tensorflow_serving/apis/predict.proto\x1a\x33tensorflow_serving/config/model_server_config.proto2d\n\x0c\x41\x64minService\x12T\n\x06Reload\x12%.tensorflow.serving.ModelServerConfig\x1a#.tensorflow.serving.PredictResponseB\x03\xf8\x01\x01\x62\x06proto3')
  ,
  dependencies=[tensorflow__serving_dot_apis_dot_predict__pb2.DESCRIPTOR,tensorflow__serving_dot_config_dot_model__server__config__pb2.DESCRIPTOR,])



_sym_db.RegisterFileDescriptor(DESCRIPTOR)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\370\001\001'))

_ADMINSERVICE = _descriptor.ServiceDescriptor(
  name='AdminService',
  full_name='tensorflow.serving.AdminService',
  file=DESCRIPTOR,
  index=0,
  options=None,
  serialized_start=159,
  serialized_end=259,
  methods=[
  _descriptor.MethodDescriptor(
    name='Reload',
    full_name='tensorflow.serving.AdminService.Reload',
    index=0,
    containing_service=None,
    input_type=tensorflow__serving_dot_config_dot_model__server__config__pb2._MODELSERVERCONFIG,
    output_type=tensorflow__serving_dot_apis_dot_predict__pb2._PREDICTRESPONSE,
    options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_ADMINSERVICE)

DESCRIPTOR.services_by_name['AdminService'] = _ADMINSERVICE

try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class AdminServiceStub(object):
    """open source marker; do not remove
    AdminService provides access to machine-learned models loaded by
    model_servers.
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.Reload = channel.unary_unary(
          '/tensorflow.serving.AdminService/Reload',
          request_serializer=tensorflow__serving_dot_config_dot_model__server__config__pb2.ModelServerConfig.SerializeToString,
          response_deserializer=tensorflow__serving_dot_apis_dot_predict__pb2.PredictResponse.FromString,
          )


  class AdminServiceServicer(object):
    """open source marker; do not remove
    AdminService provides access to machine-learned models loaded by
    model_servers.
    """

    def Reload(self, request, context):
      """Reload -- reloads models from config.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_AdminServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'Reload': grpc.unary_unary_rpc_method_handler(
            servicer.Reload,
            request_deserializer=tensorflow__serving_dot_config_dot_model__server__config__pb2.ModelServerConfig.FromString,
            response_serializer=tensorflow__serving_dot_apis_dot_predict__pb2.PredictResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'tensorflow.serving.AdminService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaAdminServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """open source marker; do not remove
    AdminService provides access to machine-learned models loaded by
    model_servers.
    """
    def Reload(self, request, context):
      """Reload -- reloads models from config.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaAdminServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """open source marker; do not remove
    AdminService provides access to machine-learned models loaded by
    model_servers.
    """
    def Reload(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Reload -- reloads models from config.
      """
      raise NotImplementedError()
    Reload.future = None


  def beta_create_AdminService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('tensorflow.serving.AdminService', 'Reload'): tensorflow__serving_dot_config_dot_model__server__config__pb2.ModelServerConfig.FromString,
    }
    response_serializers = {
      ('tensorflow.serving.AdminService', 'Reload'): tensorflow__serving_dot_apis_dot_predict__pb2.PredictResponse.SerializeToString,
    }
    method_implementations = {
      ('tensorflow.serving.AdminService', 'Reload'): face_utilities.unary_unary_inline(servicer.Reload),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_AdminService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('tensorflow.serving.AdminService', 'Reload'): tensorflow__serving_dot_config_dot_model__server__config__pb2.ModelServerConfig.SerializeToString,
    }
    response_deserializers = {
      ('tensorflow.serving.AdminService', 'Reload'): tensorflow__serving_dot_apis_dot_predict__pb2.PredictResponse.FromString,
    }
    cardinalities = {
      'Reload': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'tensorflow.serving.AdminService', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
